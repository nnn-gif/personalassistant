name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check and build
      run: npm run build

    - name: Run frontend tests
      run: npm test --if-present

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: dist/
        retention-days: 1

  test-backend:
    needs: build-frontend
    strategy:
      matrix:
        os: [macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: dist/

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Run Rust tests
      run: cargo test --manifest-path=src-tauri/Cargo.toml

    - name: Run Rust clippy
      run: cargo clippy --manifest-path=src-tauri/Cargo.toml -- -D warnings -A unused-imports -A dead-code -A unused-variables -A unexpected-cfgs -A clippy::new-without-default -A clippy::needless-range-loop -A clippy::len-zero -A clippy::while-let-on-iterator -A clippy::single-char-add-str -A clippy::unnecessary-map-or -A clippy::redundant-pattern-matching -A clippy::needless-borrows-for-generic-args -A clippy::len-without-is-empty -A clippy::arc-with-non-send-sync -A clippy::useless-format -A clippy::explicit-counter-loop -A clippy::cast-abs-to-unsigned -A clippy::single-component-path-imports -A clippy::upper-case-acronyms -A clippy::let-underscore-future

    - name: Check Rust formatting
      run: cargo fmt --manifest-path=src-tauri/Cargo.toml --check

  security-audit:
    needs: build-frontend
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download frontend build
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: dist/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: |
        cd src-tauri
        cargo audit --ignore RUSTSEC-2023-0071

    - name: Run npm audit
      run: npm audit --audit-level=moderate