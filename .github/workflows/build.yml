name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            os: 'macos'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
            os: 'macos'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            os: 'windows'
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            os: 'linux'

    runs-on: ${{ matrix.platform }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies (Linux)
      if: matrix.os == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \
          libayatana-appindicator3-dev librsvg2-dev \
          libasound2-dev libssl-dev

    - name: Rust setup
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Tauri info (debugging aid)
      run: tauri info || true

    - name: Build Tauri app
      run: tauri build ${{ matrix.args }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Zip macOS .app bundle
      if: matrix.os == 'macos'
      run: |
        cd src-tauri/target/${{ matrix.target }}/release/bundle/macos
        zip -r ../../../../../macos-${{ matrix.arch }}.zip *.app

    - name: Prepare release artifacts
      run: |
        mkdir -p release-artifacts
        # Copy platform-specific artifacts to release directory
        if [ "${{ matrix.os }}" = "windows" ]; then
          cp src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi release-artifacts/ 2>/dev/null || true
          cp src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe release-artifacts/ 2>/dev/null || true
        elif [ "${{ matrix.os }}" = "macos" ]; then
          cp src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg release-artifacts/ 2>/dev/null || true
          cp macos-${{ matrix.arch }}.zip release-artifacts/ 2>/dev/null || true
        elif [ "${{ matrix.os }}" = "linux" ]; then
          cp src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb release-artifacts/ 2>/dev/null || true
          cp src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage release-artifacts/ 2>/dev/null || true
          cp src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm release-artifacts/ 2>/dev/null || true
        fi
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-${{ matrix.arch }}
        path: release-artifacts/*
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Show full artifact paths
      run: find artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Get version without 'v' prefix
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"
        
        # Rename files with proper versioning
        for file in artifacts/**/*.dmg; do
          if [ -f "$file" ]; then
            arch=$(echo "$file" | grep -o "arm64\|x64" || echo "x64")
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-macos-${arch}.dmg"
          fi
        done
        
        for file in artifacts/**/*.zip; do
          if [ -f "$file" ]; then
            arch=$(echo "$file" | grep -o "arm64\|x64" || echo "x64")
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-macos-${arch}.app.zip"
          fi
        done
        
        for file in artifacts/**/*.msi; do
          if [ -f "$file" ]; then
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-windows-x64.msi"
          fi
        done
        
        for file in artifacts/**/*.exe; do
          if [ -f "$file" ]; then
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-windows-x64.exe"
          fi
        done
        
        for file in artifacts/**/*.deb; do
          if [ -f "$file" ]; then
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-linux-x64.deb"
          fi
        done
        
        for file in artifacts/**/*.AppImage; do
          if [ -f "$file" ]; then
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-linux-x64.AppImage"
          fi
        done
        
        for file in artifacts/**/*.rpm; do
          if [ -f "$file" ]; then
            cp "$file" "release-assets/PersonalAssistant-${VERSION}-linux-x64.rpm"
          fi
        done
        
        ls -la release-assets/

    - name: Generate checksums
      run: |
        cd release-assets
        # Generate SHA256 checksums for all files
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum * > checksums-sha256.txt
        else
          # macOS fallback
          for file in *; do
            if [ -f "$file" ] && [ "$file" != "checksums-sha256.txt" ]; then
              shasum -a 256 "$file" >> checksums-sha256.txt
            fi
          done
        fi
        cat checksums-sha256.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        body: |
          ## Personal Assistant v${{ github.ref_name }}

          ### üì¶ Downloads
          
          #### macOS
          - **Intel (x64)**: `PersonalAssistant-${{ github.ref_name }}-macos-x64.dmg` or `.app.zip`
          - **Apple Silicon (arm64)**: `PersonalAssistant-${{ github.ref_name }}-macos-arm64.dmg` or `.app.zip`
          
          #### Windows
          - **x64**: `PersonalAssistant-${{ github.ref_name }}-windows-x64.msi` (recommended) or `.exe`
          
          #### Linux
          - **x64**: 
            - `PersonalAssistant-${{ github.ref_name }}-linux-x64.AppImage` (portable, works on most distributions)
            - `PersonalAssistant-${{ github.ref_name }}-linux-x64.deb` (Debian/Ubuntu)
            - `PersonalAssistant-${{ github.ref_name }}-linux-x64.rpm` (Fedora/RHEL)
          
          #### Verification
          - SHA256 checksums are available in `checksums-sha256.txt`

          ### üöÄ Features
          - AI-powered document search and chat
          - Activity monitoring and productivity tracking
          - Goal setting and progress tracking
          - Local data storage (privacy-first)
          - Multi-format document processing

          ### üìã Prerequisites
          1. **Ollama**: `curl -fsSL https://ollama.ai/install.sh | sh`
          2. **AI Models**: `ollama pull nomic-embed-text && ollama pull llama3.2:1b`
          3. **Qdrant** (optional): `docker run -p 6333:6333 qdrant/qdrant`

          ### üîß Installation
          See [INSTALLATION.md](INSTALLATION.md) for setup instructions.

          ### üìù Changelog
          - Enhanced document processing with pdf-extract fallback
          - Improved RAG system with Qdrant integration
          - Activity monitoring with goal tracking
          - Multi-model LLM support
          - Better error handling and logging
          - Fixed build issues and icon packaging

        draft: false
        prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}