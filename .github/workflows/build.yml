name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'ubuntu-20.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev pkg-config

    - name: Rust setup
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Build Tauri app
      run: tauri build ${{ matrix.args }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Upload artifacts (macOS)
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
        retention-days: 30

    - name: Upload artifacts (Ubuntu)
      if: matrix.platform == 'ubuntu-20.04'
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
          src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
        retention-days: 30

    - name: Upload artifacts (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/macos-x64/**/*
          artifacts/macos-arm64/**/*
          artifacts/linux-x64/**/*
          artifacts/windows-x64/**/*
        body: |
          ## Personal Assistant v${{ github.ref_name }}
          
          ### üì¶ Downloads
          - **macOS (Intel)**: Download the `.dmg` file from macos-x64
          - **macOS (Apple Silicon)**: Download the `.dmg` file from macos-arm64  
          - **Windows**: Download the `.msi` or `.exe` file from windows-x64
          - **Linux**: Download the `.deb` or `.AppImage` file from linux-x64
          
          ### üöÄ Features
          - AI-powered document search and chat
          - Activity monitoring and productivity tracking
          - Goal setting and progress tracking
          - Local data storage (privacy-first)
          - Multi-format document processing
          
          ### üìã Prerequisites
          Users need to install:
          1. **Ollama**: `curl -fsSL https://ollama.ai/install.sh | sh`
          2. **AI Models**: `ollama pull nomic-embed-text && ollama pull llama3.2:1b`
          3. **Qdrant** (optional): `docker run -p 6333:6333 qdrant/qdrant`
          
          ### üîß Installation
          See [INSTALLATION.md](INSTALLATION.md) for detailed setup instructions.
          
          ### üìù Changelog
          - Enhanced document processing with pdf-extract fallback
          - Improved RAG system with Qdrant integration
          - Activity monitoring with goal tracking
          - Multi-model LLM support
          - Better error handling and logging
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}