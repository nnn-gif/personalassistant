name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *' # Run at 2 AM UTC daily
  workflow_dispatch: # Allow manual trigger

env:
  CARGO_TERM_COLOR: always

jobs:
  nightly-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'arm64'
          - platform: 'ubuntu-20.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev pkg-config

    - name: Rust setup
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli@latest

    - name: Build Tauri app (Debug)
      run: tauri build --debug ${{ matrix.args }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload nightly artifacts (macOS)
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nightly-macos-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/debug/bundle/dmg/*.dmg
          src-tauri/target/${{ matrix.target }}/debug/bundle/macos/*.app
        retention-days: 7

    - name: Upload nightly artifacts (Ubuntu)
      if: matrix.platform == 'ubuntu-20.04'
      uses: actions/upload-artifact@v4
      with:
        name: nightly-linux-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/debug/bundle/deb/*.deb
          src-tauri/target/${{ matrix.target }}/debug/bundle/appimage/*.AppImage
        retention-days: 7

    - name: Upload nightly artifacts (Windows)
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nightly-windows-${{ matrix.arch }}
        path: |
          src-tauri/target/${{ matrix.target }}/debug/bundle/msi/*.msi
          src-tauri/target/${{ matrix.target }}/debug/bundle/nsis/*.exe
        retention-days: 7

  cleanup-old-artifacts:
    needs: nightly-build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Delete old artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          nightly-*
        useGlob: true
        failOnError: false